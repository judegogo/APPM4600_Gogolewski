import numpy as np
import matplotlib.pyplot as plt
# Define the function
def p(x):
    return (x - 2)**9  

def pCoeff(x):
    return (x**9 -18*x**8 +144*x**7 -672*x**6 +2016*x**5 
    -4032*x**4 +5376*x**3 -4608*x**2 +2304*x -512)
    
# Define the range of y values
y = np.arange(1.920, 2.081, 0.001)  # Adjusted to include 2.080

# Plot the function
plt.plot(y, pCoeff(y))
plt.xlabel('x')
plt.ylabel('p(x)')
plt.title('Plot of p(x) = (x - 2)^9')
plt.grid(True)
plt.show()

plt.plot(y, p(y))

# Plot enhancements
plt.xlabel('x')
plt.ylabel('p(x)')
plt.title('Plot of p(x) = (x - 2)^9 (Direct Evaluation)')
plt.grid(True)
plt.show()

result = 5 - 2 * np.cos(1) - 3 * np.sin(1) - 7/6

# Print the result
print("The result of the expression is:", result)

# Define the coefficients of the quadratic equation
a = 1
b = -56
c = 1

# Calculate the discriminant
discriminant = b**2 - 4 * a * c

# Compute the two roots
r1 = (-b + np.sqrt(discriminant)) / (2 * a)
r2 = (-b - np.sqrt(discriminant)) / (2 * a)

def f(x, a, b, c):
    return a * x**2 + b * x + c

r1eval = f(55.98, a, b, c)
r2eval = f(0.018, a, b, c)

# Print the results
print("The roots are:")
print("r1 =", r1)
print("r2 =", r2)

print("The evaluation of the roots are:")
print("r1eval =", r1eval)
print("r2eval =", r2eval)

rel_error_r1 = abs(r1 - r1eval) / abs(r1eval)
rel_error_r2 = abs(r2 - r2eval) / abs(r2eval)

# Print the results
print("Relative error of r1:", rel_error_r1)
print("Relative error of r2:", rel_error_r2)