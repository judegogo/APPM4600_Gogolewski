import numpy as np
import matplotlib.pyplot as plt


# Define the function
def p(x):
    return (x - 2)**9  

def pCoeff(x):
    return (x**9 -18*x**8 +144*x**7 -672*x**6 +2016*x**5 
    -4032*x**4 +5376*x**3 -4608*x**2 +2304*x -512)
    
# Define the range of y values
y = np.arange(1.920, 2.081, 0.001)  # Adjusted to include 2.080

# Plot the function
plt.plot(y, pCoeff(y))
plt.xlabel('x')
plt.ylabel('p(x)')
plt.title('Plot of p(x) = (x - 2)^9')
plt.grid(True)
plt.show()

plt.plot(y, p(y))

# Plot enhancements
plt.xlabel('x')
plt.ylabel('p(x)')
plt.title('Plot of p(x) = (x - 2)^9 (Direct Evaluation)')
plt.grid(True)
plt.show()

result = 5 - 2 * np.cos(1) - 3 * np.sin(1) - 7/6

# Print the result
print("The result of the expression is:", result)

# Problem 4
# Define the coefficients of the quadratic equation
a = 1
b = -56
c = 1

# Calculate the discriminant
discriminant = b**2 - 4 * a * c

# Compute the two roots
r1 = (-b + np.sqrt(discriminant)) / (2 * a)
r2 = (-b - np.sqrt(discriminant)) / (2 * a)

print("The roots via the Quadratic Formula are: r1 = %1.16e, r2 = %1.16e" % (r1, r2))

#now we have to improve the accuracy of the roots by rearranging the equation for cases of b
if (b > 0):
    r1eval = (2 * c) / (-b - np.sqrt(discriminant))
    r2eval = (-b - np.sqrt(discriminant)) / (2 *a)
elif (b < 0):
    r1eval = (-b + np.sqrt(discriminant)) / (2 *a)
    r2eval = (2 * c) / (-b + np.sqrt(discriminant))
else:
    rel_error_r1 = np.sqrt(-c/a)
    r2eval = -rel_error_r1

print("The roots via the imroved formula are: r1 = %1.16e, r2 = %1.16e" %
       (r1eval, r2eval))

rel_error_r1 = np.abs(r1 - r1eval) / np.abs(r1eval)
rel_error_r2 = np.abs(r2 - r2eval) / np.abs(r2eval)

# Print the results
print("Relative error: r1 = %1.4e, r2 = %1.4e" % (rel_error_r1, rel_error_r2))

# problem 5 
# Define the expression: -2 * sin(x + δ/2) * sin(δ/2)
def NoSubtraction(x, delta):
    return -2 * np.sin(x + delta / 2) * np.sin(delta / 2)

# Define the reference expression: cos(x + δ) - cos(x)
def original(x, delta):
    return np.cos(x + delta) - np.cos(x)

#5c New algorithm
def NewAlgorithm(x, delta):
    return -delta * np.sin(x)

# Values of x
x_values = [np.pi, 10**6]

# Values of δ (logarithmically spaced)
delta_values = 10**np.arange(-16, 1.1, 1)  # δ = 10^-16 to 10^0

# Initialize a dictionary to store differences
differences = {x: [] for x in x_values}

# Compute differences for each x and δ
for x in x_values:
    for delta in delta_values:
        diff = NoSubtraction(x, delta) - original(x, delta)
        differences[x].append(diff)

# Plot the differences
for x in x_values:
    plt.figure()
    plt.plot(np.log10(delta_values), differences[x], label=f"x = {x}")
    plt.xlabel("log10(δ)")
    plt.ylabel("Difference")
    plt.title(f"Difference vs δ for x = {x}")
    plt.grid(True)
    plt.legend()
    plt.show()

    # Initialize a dictionary to store differences
differences_new = {x: [] for x in x_values}

# Compute differences for each x and δ
for x in x_values:
    for delta in delta_values:
        diff = NewAlgorithm(x, delta) - original(x, delta)
        differences_new[x].append(diff)

# Plot the differences
for x in x_values:
    plt.figure()
    plt.plot(np.log10(delta_values), differences_new[x], label=f"x = {x}")
    plt.xlabel("log10(δ)")
    plt.ylabel("Difference")
    plt.title(f"Difference (Approximation - Reference) vs δ for x = {x}")
    plt.grid(True)
    plt.legend()
    plt.show()

